using Microsoft.AspNetCore.Authentication.JwtBearer; using Microsoft.AspNetCore.Identity; using Microsoft.IdentityModel.Tokens; using Microsoft.OpenApi.Models; using System.Reflection; using System.Text; using MyApp.Application; using MyApp.Host.Endpoints; using MyApp.Infrastructure; using MyApp.Infrastructure.Seed; var builder = WebApplication.CreateBuilder(args); var cfg = builder.Configuration; builder.Services.AddInfrastructure(cfg); // Auth: Cookies (Identity) default for UI + JWT for API var jwtKey = cfg["Jwt:Key"] ?? "dev-secret-please-change"; var jwtIssuer = cfg["Jwt:Issuer"] ?? "MyApp.Host"; var jwtAudience = cfg["Jwt:Audience"] ?? "MyApp.Clients"; var key = new SymmetricSecurityKey(Encoding.UTF8.GetBytes(jwtKey)); builder.Services.AddAuthentication(options => { options.DefaultAuthenticateScheme = IdentityConstants.ApplicationScheme; options.DefaultChallengeScheme = IdentityConstants.ApplicationScheme; }) .AddJwtBearer(JwtBearerDefaults.AuthenticationScheme, options => { options.TokenValidationParameters = new TokenValidationParameters { ValidateIssuer = true, ValidateAudience = true, ValidateIssuerSigningKey = true, ValidIssuer = jwtIssuer, ValidAudience = jwtAudience, IssuerSigningKey = key, ClockSkew = TimeSpan.FromMinutes(2) }; }); builder.Services.AddAuthorization(); builder.Services.AddControllersWithViews(); builder.Services.AddRazorPages(); // Swagger (OpenAPI) tuned for external consumers (Power Pages, etc.) builder.Services.AddEndpointsApiExplorer(); builder.Services.AddSwaggerGen(c => { c.SwaggerDoc("v1", new OpenApiInfo { Title = "MyApp API", Version = "v1", Description = "MyApp unified API (DDD) â€” AppServices exposed automatically via Minimal APIs.", Contact = new OpenApiContact { Name = "API Owner", Email = "api.owner@example.com" } }); // Bearer security scheme for JWT var securityScheme = new OpenApiSecurityScheme { Name = "Authorization", Description = "Enter 'Bearer {token}'", In = ParameterLocation.Header, Type = SecuritySchemeType.Http, Scheme = "bearer", BearerFormat = "JWT", Reference = new OpenApiReference { Type = ReferenceType.SecurityScheme, Id = "Bearer" } }; c.AddSecurityDefinition("Bearer", securityScheme); c.AddSecurityRequirement(new OpenApiSecurityRequirement { { securityScheme, Array.Empty<string>() } }); // Include XML comments if present var xml = $"{Assembly.GetExecutingAssembly().GetName().Name}.xml"; var xmlPath = Path.Combine(AppContext.BaseDirectory, xml); if (File.Exists(xmlPath)) c.IncludeXmlComments(xmlPath, includeControllerXmlComments: true); }); var app = builder.Build(); await IdentitySeeder.SeedAsync(app.Services); if (app.Environment.IsDevelopment()) { app.UseSwagger(); app.UseSwaggerUI(o => { o.SwaggerEndpoint("/swagger/v1/swagger.json", "MyApp API v1"); o.DocumentTitle = "MyApp API Docs"; o.DisplayRequestDuration(); }); } else { app.UseSwagger(); app.UseSwaggerUI(o => { o.SwaggerEndpoint("/swagger/v1/swagger.json", "MyApp API v1"); }); app.UseExceptionHandler("/Home/Error"); app.UseHsts(); } app.UseHttpsRedirection(); app.UseStaticFiles(); app.UseRouting(); app.UseAuthentication(); app.UseAuthorization(); // Map MVC default + Identity UI app.MapControllerRoute(name: "default", pattern: "{controller=Home}/{action=Index}/{id?}"); app.MapRazorPages(); // Auto-map all AppService IMPLEMENTATIONS (no attribute required) app.MapAppServiceImplementations(typeof(IAppService).Assembly); app.Run();
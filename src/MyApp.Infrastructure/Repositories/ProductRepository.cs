using Microsoft.EntityFrameworkCore; using MyApp.Domain.Entities; using MyApp.Domain.Repositories; using MyApp.Infrastructure.Persistence; namespace MyApp.Infrastructure.Repositories; public sealed class ProductRepository(AppDbContext db) : IProductRepository{ public async Task AddAsync(Product product, CancellationToken ct=default){ await db.Products.AddAsync(product, ct); await db.SaveChangesAsync(ct);} public async Task DeleteAsync(Product product, CancellationToken ct=default){ db.Products.Remove(product); await db.SaveChangesAsync(ct);} public async Task<bool> ExistsByNameAsync(string name, CancellationToken ct=default){ return await db.Products.AnyAsync(p=>p.Name==name, ct);} public async Task<Product?> GetByIdAsync(Guid id, CancellationToken ct=default){ return await db.Products.FindAsync(new object?[]{id}, ct);} public async Task<IReadOnlyList<Product>> ListAsync(CancellationToken ct=default){ return await db.Products.AsNoTracking().OrderBy(p=>p.Name).ToListAsync(ct);} public async Task UpdateAsync(Product product, CancellationToken ct=default){ db.Products.Update(product); await db.SaveChangesAsync(ct);} }